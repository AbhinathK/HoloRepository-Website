{"version":3,"sources":["images/background.jpg","components/shared/Header.js","components/shared/Footer.js","components/HomePage.js","components/GroupMemberPage.js","components/IntroPage.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","SharedHeader","props","handleItemClick","e","name","setState","activeItem","state","this","Menu","fixed","id","pointing","secondary","size","Container","Item","as","Link","to","style","padding","Image","src","active","onClick","Icon","href","position","Component","SharedFooter","width","height","display","marginLeft","marginRight","marginBottom","HomePage","minHeight","backgroundImage","BackgroundImage","backgroundPosition","backgroundSize","marginTop","Segment","backgroundColor","textAlign","fontSize","fontWeight","color","Button","primary","vertical","Grid","container","stackable","verticalAlign","Row","Column","floated","window","scrollTo","GroupMemberPage","content","circular","Divider","IntroPage","Card","fluid","Content","Header","App","exact","path","render","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6b674bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.451c266f.jpg\";","import React, { Component } from \"react\";\r\nimport {\r\n    Icon,\r\n    Image,\r\n    Menu,\r\n    Container\r\n} from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nclass SharedHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeItem: this.props.activeItem\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n    render() {\r\n        const { activeItem } = this.state;\r\n\r\n        return (\r\n            <Menu fixed='top' id = \"menu\" pointing secondary size='huge'>\r\n                <Container >\r\n                    <Menu.Item as={Link} to=\"/home\" style={{ padding: '1em 2em'}}>\r\n                        <Image src=\"Images/logo_with_title.png\" size = \"small\"/>\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item\r\n                        name='Home'\r\n                        active={activeItem === 'Home'}\r\n                        onClick={this.handleItemClick}\r\n                        as={Link} to=\"/home\"\r\n                    >\r\n                        <Icon name = \"home\"/>\r\n                        {\"Home\"}\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item\r\n                        name='Introduction'\r\n                        active={activeItem === 'Introduction'}\r\n                        onClick={this.handleItemClick}\r\n                        as={Link} to=\"/intro\"\r\n                    >\r\n                        <Icon name = \"list ul\"/>\r\n                        {\"Introduction\"}\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item\r\n                        name='Group members'\r\n                        active={activeItem === 'Group members'}\r\n                        onClick={this.handleItemClick}\r\n                        as={Link} to=\"/groupmember\"\r\n                    >\r\n                        <Icon name = \"users\"/>\r\n                        {\"Group Members\"}\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item\r\n                        name='github'\r\n                        as='a'\r\n                        active={activeItem === 'github'}\r\n                        onClick={this.handleItemClick}\r\n                        href= \"https://github.com/nbckr/HoloRepository-Core\"\r\n                        position = 'right'\r\n                    >\r\n                        <Icon name = \"github\"/>\r\n                        {\"GitHub\"}\r\n                    </Menu.Item>\r\n                </Container>\r\n            </Menu>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SharedHeader;\r\n","import React, { Component } from \"react\";\r\nimport \"./Footer.css\";\r\nimport {Image} from \"semantic-ui-react\";\r\n\r\nclass SharedFooter extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <Image src= \"Images/logos.png\" style={{\r\n                    width: '814px',\r\n                    height: '58.5px',\r\n                    display: 'block',\r\n                    marginLeft: 'auto',\r\n                    marginRight: 'auto',\r\n                    marginBottom: '2em'}}/>\r\n                <div>Copyright (C) 2019 University College London</div>\r\n                <div>\r\n                    Read our{\" \"}\r\n                    <a href=\"https://github.com/nbckr/HoloRepository-Core\">Source Code</a> and{\" \"}\r\n                    <a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\">Licence</a>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SharedFooter;\r\n","import React, { Component } from \"react\";\r\nimport SharedHeader from \"./shared/Header\";\r\nimport SharedFooter from \"./shared/Footer\";\r\nimport BackgroundImage from \"../images/background.jpg\";\r\nimport {\r\n    Header,\r\n    Segment,\r\n    Grid,\r\n    Container,\r\n    Button,\r\n    Icon\r\n} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass HomePage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SharedHeader activeItem='Home'/>\r\n                <div style={{\r\n                        minHeight: 700,\r\n                        backgroundImage: `url(${BackgroundImage})`,\r\n                        backgroundPosition: 'center',\r\n                        backgroundSize: 'cover',\r\n                        marginTop: '5',\r\n                    }}>\r\n                    <Segment style = {{\r\n                        backgroundColor: 'rgba(0,0,0,0.5)',\r\n                        backgroundPosition: 'center',\r\n                        backgroundSize: 'cover',\r\n                        height: 700}}>\r\n                        <Container textAlign='center'>\r\n                            <p style={{\r\n                                    fontSize: '6em',\r\n                                    fontWeight: 'normal',\r\n                                    color: 'white',\r\n                                    marginTop: 150\r\n                                }}>\r\n                                HoloRepository\r\n                            </p>\r\n                            <p style={{\r\n                                    fontSize: '1.8em',\r\n                                    fontWeight: 'normal',\r\n                                    color: 'white'\r\n\r\n                                }}>\r\n                                A system for transforming medical imaging studies such as CT or MRI scans into\r\n                                3-dimensional holograms, storing data on a cloud-based platform and making it available\r\n                                for other systems.\r\n                            </p>\r\n                            <Button primary size='huge' as={Link} to=\"/intro\"style={{marginTop: 50}}>\r\n                                Start Explore\r\n                                <Icon name='right arrow' />\r\n                            </Button>\r\n                        </Container>\r\n                    </Segment>\r\n                </div>\r\n\r\n                <Segment style={{ padding: '8em 0em'}} vertical>\r\n                    <Container textAlign='justified'>\r\n                        <Grid container stackable verticalAlign='middle'>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={8}>\r\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                        HoloRepository UI\r\n                                    </Header>\r\n                                    <p style={{ fontSize: '1.1em' }}>\r\n                                        A web-based application that allows practitioners to browse their patients and manage the\r\n                                        generation of 3D models sourced from imaging studies like CT or MRI scans. The client-side\r\n                                        application is accompanied by an API server that is responsible for communicating with the\r\n                                        other components.\r\n                                    </p>\r\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                        HoloStorage and Accessor\r\n                                    </Header>\r\n                                    <p style={{ fontSize: '1.1em' }}>\r\n                                        A cloud-based storage for medical 3D models and associated metadata. Entirely hosted on\r\n                                        Microsoft Azure, a FHIR server stores the structured medical data and a Blob Storage server\r\n                                        provides for the binary holographic data.\r\n                                    </p>\r\n                                    <p style={{ fontSize: '1.1em' }}>\r\n                                        An enhanced facade, offering a consistent interface to the HoloStorage and translating\r\n                                        the public REST API to internal FHIR queries. To facilitate development of 3rd party\r\n                                        components, the interface comes with an interactive OpenAPI documentation.\r\n                                    </p>\r\n                                </Grid.Column>\r\n                                <Grid.Column floated='right' width={8}>\r\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                        HoloPipelines\r\n                                    </Header>\r\n                                    <p style={{ fontSize: '1.1em' }}>\r\n                                        A cloud-based service that performs the automatic generation of 3D models from 2D image\r\n                                        stacks. Pre-trained neural network models are deployed and accessed with this component\r\n                                        alongside traditional techniques like Hounsfield value thresholding.\r\n                                    </p>\r\n                                    <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                        HoloLens App and StorageConnector\r\n                                    </Header>\r\n                                    <p style={{ fontSize: '1.1em' }}>\r\n                                        A simple application that demonstrates how to dynamically access 3D models stored in the\r\n                                        HoloStorage. The scenes can be distributed alongside the Connector library and serve as\r\n                                        examples and interactive documentation.\r\n                                    </p>\r\n                                    <p style={{ fontSize: '1.1em' }}>\r\n                                        A Unity library handling the runtime network connections from HoloLens applications to\r\n                                        the HoloStorage. Distributed as a separate UnityPackage, this is meant to facilitate\r\n                                        development of 3rd party applications that plug into the HoloRepository ecosystem.\r\n                                    </p>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Container>\r\n                </Segment>\r\n                <SharedFooter/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0)\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from \"react\";\r\nimport SharedHeader from \"./shared/Header\";\r\nimport SharedFooter from \"./shared/Footer\";\r\nimport {\r\n    Header,\r\n    Segment,\r\n    Image,\r\n    Grid,\r\n    Divider\r\n} from \"semantic-ui-react\";\r\n\r\nclass GroupMemberPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SharedHeader activeItem='Group members'/>\r\n                <Segment vertical>\r\n                    <Header\r\n                        textAlign='center'\r\n                        as='h1'\r\n                        content='Group Members'\r\n                        style={{\r\n                            fontSize: '4em',\r\n                            fontWeight: 'normal',\r\n                            marginBottom: 0,\r\n                            marginTop: '2em',\r\n                        }}/>\r\n                    <Grid container style={{ padding: '5em 0em'}}>\r\n                        <Grid.Row>\r\n                            <p style={{padding: '0em 1em'}}>\r\n                                (Sorted by alphabetical)\r\n                            </p>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Grid.Column width={3}>\r\n                                <Image src= \"Images/niels.jpg\" circular/>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={13}>\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    Boecker, Niels\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Team leader</b></p>\r\n                                <p style={{ fontSize: '1.2em' }}>Team leader</p>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Email:</b> niels.boecker.18@ucl.ac.uk</p>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n\r\n                        <Divider />\r\n\r\n                        <Grid.Row>\r\n                            <Grid.Column width={3}>\r\n                                <Image src= \"Images/wenjie.png\" circular/>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={13}>\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    Boon, Wenjie\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Team member</b></p>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A web-based application that allows practitioners to browse their patients and manage the\r\n                                    generation of 3D models sourced from imaging studies like CT or MRI scans. The client-side\r\n                                    application is accompanied by an API server that is responsible for communicating with the\r\n                                    other components.\r\n                                </p>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Email:</b> wenjie.boon.18@ucl.ac.uk</p>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n\r\n                        <Divider />\r\n\r\n                        <Grid.Row>\r\n                            <Grid.Column width={3}>\r\n                                <Image src='https://react.semantic-ui.com/images/wireframe/image.png' circular/>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={13}>\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    Boonyaprasert, Udomkarn\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Team member</b></p>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A web-based application that allows practitioners to browse their patients and manage the\r\n                                    generation of 3D models sourced from imaging studies like CT or MRI scans. The client-side\r\n                                    application is accompanied by an API server that is responsible for communicating with the\r\n                                    other components.\r\n                                </p>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Email:</b> udomkarn.boonyaprasert.17@ucl.ac.uk</p>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n\r\n                        <Divider />\r\n\r\n                        <Grid.Row>\r\n                            <Grid.Column width={3}>\r\n                                <Image src= \"Images/fanbo.png\" circular/>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={13}>\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    Meng, Fanbo\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Team member</b></p>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A web-based application that allows practitioners to browse their patients and manage the\r\n                                    generation of 3D models sourced from imaging studies like CT or MRI scans. The client-side\r\n                                    application is accompanied by an API server that is responsible for communicating with the\r\n                                    other components.\r\n                                </p>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Email:</b> fanbo.meng.18@ucl.ac.uk</p>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n\r\n                        <Divider />\r\n\r\n                        <Grid.Row>\r\n                            <Grid.Column width={3}>\r\n                                <Image src='https://react.semantic-ui.com/images/wireframe/image.png' circular/>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={13}>\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    Wong, Ka Wai\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Team member</b></p>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A web-based application that allows practitioners to browse their patients and manage the\r\n                                    generation of 3D models sourced from imaging studies like CT or MRI scans. The client-side\r\n                                    application is accompanied by an API server that is responsible for communicating with the\r\n                                    other components.\r\n                                </p>\r\n                                <p style={{ fontSize: '1.2em' }}><b>Email:</b> ka.wong.18@ucl.ac.uk</p>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Segment>\r\n                <SharedFooter/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0)\r\n    }\r\n}\r\n\r\nexport default GroupMemberPage;\r\n","import React, { Component } from \"react\";\r\nimport SharedHeader from \"./shared/Header\";\r\nimport SharedFooter from \"./shared/Footer\";\r\nimport {\r\n    Header,\r\n    Segment,\r\n    Grid,\r\n    Divider,\r\n    Container,\r\n    Card\r\n} from \"semantic-ui-react\";\r\n\r\nclass IntroPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SharedHeader activeItem='Introduction'/>\r\n                    <Header\r\n                        textAlign='center'\r\n                        as='h1'\r\n                        content='Introduction'\r\n                        style={{\r\n                            fontSize: '4em',\r\n                            fontWeight: 'normal',\r\n                            marginBottom: 0,\r\n                            marginTop: '2em',\r\n                        }}/>\r\n                <Segment style={{ padding: '5em 0em'}} vertical>\r\n                    <Container textAlign='justified'>\r\n                        <Grid container stackable verticalAlign='middle'>\r\n                            <Grid.Column width={16}>\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    Background\r\n                                </Header>\r\n\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    Recent technical advancements in the realm of augmented reality (AR) and the availability\r\n                                    of consumer head-mounted display (HMD) devices such as the Microsoft HoloLens have opened\r\n                                    a wealth of opportunities for healthcare applications, particularly in medical imaging.\r\n                                    Several approaches have been proposed to transform imaging studies, such as CT or MRI\r\n                                    scans, into three-dimensional models which can be inspected and manipulated in an AR\r\n                                    experience [1–4]. Generally, all studies agree that the technology is very promising\r\n                                    and may even revolutionise the practice of medicine [5]. However, virtually every\r\n                                    existing workflow relies on significant manual guidance to conduct steps like segmentation\r\n                                    or conversion to polygonal models.\r\n                                </p>\r\n\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    Neural networks can help automate many tedious tasks and are increasingly used in medical\r\n                                    imaging. Architectures such as the 3D U-Net [6] generate models which autonomously create\r\n                                    segmentation maps, even with relatively little training data. However, translating these\r\n                                    advancements from theory to clinical practice has unique challenges: The source code may\r\n                                    not be available, documentation may be missing or require too much technical knowledge.\r\n                                    Furthermore, different operating systems, software packages and dependencies obstruct\r\n                                    successful usage [7].\r\n                                </p>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    With the HoloRepository project, we intend to build the technical base for a seamless\r\n                                    workflow that allows practitioners to generate 3D models from imaging studies and access\r\n                                    them in an AR setting with as little manual involvement as possible. Pre-trained neural\r\n                                    networks can be packaged into shareable Docker containers and accessed with a unified\r\n                                    interface. Additionally, the Fast Healthcare Interoperability Resources (FHIR) standard,\r\n                                    which is rapidly being adapted and also has a significant impact on the field of radiology [8],\r\n                                    will connect the 3D models with existing patient health records.\r\n                                </p>\r\n\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    HoloRepositoryUI\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A web-based application that allows practitioners to browse their patients and manage the\r\n                                    generation of 3D models sourced from imaging studies like CT or MRI scans. The client-side\r\n                                    application is accompanied by an API server that is responsible for communicating with the\r\n                                    other components.\r\n                                </p>\r\n                                <Divider />\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    HoloPipelines\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A cloud-based service that performs the automatic generation of 3D models from 2D image\r\n                                    stacks. Pre-trained neural network models are deployed and accessed with this component\r\n                                    alongside traditional techniques like Hounsfield value thresholding.\r\n                                </p>\r\n                                <Divider />\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    HoloStorage\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A cloud-based storage for medical 3D models and associated metadata. Entirely hosted on\r\n                                    Microsoft Azure, a FHIR server stores the structured medical data and a Blob Storage server\r\n                                    provides for the binary holographic data.\r\n                                </p>\r\n                                <Divider />\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    HoloStorageAccessor\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    An enhanced facade, offering a consistent interface to the HoloStorage and translating\r\n                                    the public REST API to internal FHIR queries. To facilitate development of 3rd party\r\n                                    components, the interface comes with an interactive OpenAPI documentation.\r\n                                </p>\r\n                                <Divider />\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    HoloStorageConnector\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A Unity library handling the runtime network connections from HoloLens applications to\r\n                                    the HoloStorage. Distributed as a separate UnityPackage, this is meant to facilitate\r\n                                    development of 3rd party applications that plug into the HoloRepository ecosystem.\r\n                                </p>\r\n                                <Divider />\r\n                                <Header as='h3' style={{ fontSize: '2em' }}>\r\n                                    HoloRepository demo application\r\n                                </Header>\r\n                                <p style={{ fontSize: '1.2em' }}>\r\n                                    A simple application that demonstrates how to dynamically access 3D models stored in the\r\n                                    HoloStorage. The scenes can be distributed alongside the Connector library and serve as\r\n                                    examples and interactive documentation.\r\n                                </p>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                        <Card fluid style={{ marginTop: '3em'}}>\r\n                            <Card.Content>\r\n                                <Card.Header>References</Card.Header>\r\n                            </Card.Content>\r\n                            <Card.Content>\r\n                                <p>[1]\tSmith CM. Medical Imaging in Mixed Reality: A holographics software pipeline.\r\n                                    University College London, 2018.</p>\r\n                                <p>[2]\tPratt P, Ives M, Lawton G, Simmons J, Radev N, Spyropoulou L, et al. Through the\r\n                                    HoloLensTM looking glass: augmented reality for extremity reconstruction surgery using\r\n                                    3D vascular models with perforating vessels. Eur Radiol Exp\r\n                                    2018;2:2. doi:10.1186/s41747-017-0033-2.</p>\r\n                                <p>[3]\tAffolter R, Eggert S, Sieberth T, Thali M, Ebert LC. Applying augmented reality\r\n                                    during a forensic autopsy—Microsoft HoloLens as a DICOM viewer. Journal of Forensic\r\n                                    Radiology and Imaging 2019;16:5–8. doi:10.1016/j.jofri.2018.11.003.</p>\r\n                                <p>[4]\tPage M. Visualization of Complex Medical Data Using Next-Generation Holographic\r\n                                    Techniques 2017.</p>\r\n                                <p>[5]\tBeydoun A, Gupta V, Siegel E. DICOM to 3D Holograms: Use Case for Augmented\r\n                                    Reality in Diagnostic and Interventional Radiology. SIIM Scientific Session Posters\r\n                                    and Demonstrations 2017:4.</p>\r\n                                <p>[6]\tÇiçek Ö, Abdulkadir A, Lienkamp SS, Brox T, Ronneberger O. 3D U-Net: Learning\r\n                                    Dense Volumetric Segmentation from Sparse Annotation. ArXiv:160606650 [Cs] 2016.</p>\r\n                                <p>[7]\tBeers A, Brown J, Chang K, Hoebel K, Gerstner E, Rosen B, et al. DeepNeuro: an\r\n                                    open-source deep learning toolbox for neuroimaging. ArXiv:180804589 [Cs] 2018.</p>\r\n                                <p>[8]\tKamel PI, Nagy PG. Patient-Centered Radiology with FHIR: an Introduction to the\r\n                                    Use of FHIR to Offer Radiology a Clinically Integrated Platform. J Digit Imaging\r\n                                    2018;31:327–33. doi:10.1007/s10278-018-0087-6.</p>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    </Container>\r\n\r\n                </Segment>\r\n                <SharedFooter/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0)\r\n    }\r\n}\r\n\r\nexport default IntroPage;\r\n","import React, { Component } from \"react\";\r\nimport HomePage from \"./HomePage\";\r\nimport GroupMemberPage from \"./GroupMemberPage\";\r\nimport IntroPage from \"./IntroPage\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path=\"/\"\r\n                            render={() => (<HomePage/>)}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/home\"\r\n\r\n                            render={() => (<HomePage/>)}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/intro\"\r\n                            render={() => (<IntroPage/>)}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/groupmember\"\r\n                            render={() => (<GroupMemberPage/>)}\r\n                        />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}